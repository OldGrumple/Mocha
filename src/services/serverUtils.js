const fs = require('fs').promises;
const path = require('path');

// Helper function to create start script
const createStartScript = async (serverDir, config) => {
    const memoryMB = config.memory || 2;
    const maxMemoryMB = memoryMB * 1024; // Convert to MB for Java
    const minMemoryMB = Math.floor(maxMemoryMB * 0.5); // Use 50% of max memory as min

    // Determine which Java version to use based on Minecraft version
    const minecraftVersion = config.minecraftVersion || '1.20.0';
    const [major, minor] = minecraftVersion.split('.').map(Number);
    const useJava21 = major >= 1 && minor >= 20;

    // Get platform-specific Java paths
    const platform = process.platform;
    let java21Path = '';
    switch (platform) {
        case 'darwin': // macOS
            java21Path = '/opt/homebrew/opt/openjdk@21/bin/java';
            break;
        case 'linux':
            java21Path = '/usr/lib/jvm/java-21-openjdk-amd64/bin/java';
            break;
        case 'win32':
            java21Path = 'C:\\Program Files\\Java\\jdk-21\\bin\\java.exe';
            break;
        default:
            java21Path = 'java21';
    }

    // Create initialization script (init.sh)
    const unixInitScript = `#!/bin/bash

# Minecraft server initialization script
# Generated by Mocha

# Change to script directory
cd "$(dirname "$0")"

# Java version selection
if [ -f "${java21Path}" ]; then
    JAVA_CMD="${java21Path}"
else
    JAVA_CMD="java"
fi

# Java arguments
JAVA_OPTS="-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1"

# Initialize the server
echo "Initializing Minecraft server..."
$JAVA_CMD $JAVA_OPTS -jar server.jar

# Check if initialization was successful
if [ ! -f "server.properties" ]; then
    echo "Failed to initialize server. Please check the logs above."
    exit 1
fi

echo "Server initialized successfully!"
`;

    // Create Windows initialization script (init.bat)
    const windowsInitScript = `@echo off
REM Minecraft server initialization script
REM Generated by Mocha

REM Change to script directory
cd /d "%~dp0"

REM Java version selection
if exist "${java21Path}" (
    set JAVA_CMD="${java21Path}"
) else (
    set JAVA_CMD=java
)

REM Java arguments
set JAVA_OPTS=-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1

REM Initialize the server
echo Initializing Minecraft server...
%JAVA_CMD% %JAVA_OPTS% -jar server.jar

REM Check if initialization was successful
if not exist "server.properties" (
    echo Failed to initialize server. Please check the logs above.
    exit /b 1
)

echo Server initialized successfully!
`;

    // Create Unix start script (start.sh)
    const unixStartScript = `#!/bin/bash

# Minecraft server start script
# Generated by Mocha

# Change to script directory
cd "$(dirname "$0")"

# Check if server is initialized
if [ ! -f "server.properties" ]; then
    echo "Server not initialized. Running initialization script..."
    ./init.sh
    if [ $? -ne 0 ]; then
        echo "Failed to initialize server."
        exit 1
    fi
fi

# Java version selection
if [ -f "${java21Path}" ]; then
    JAVA_CMD="${java21Path}"
else
    JAVA_CMD="java"
fi

# Java arguments
JAVA_OPTS="-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1"

# Start the server
$JAVA_CMD $JAVA_OPTS -jar server.jar nogui
`;

    // Create Windows start script (start.bat)
    const windowsStartScript = `@echo off
REM Minecraft server start script
REM Generated by Mocha

REM Change to script directory
cd /d "%~dp0"

REM Check if server is initialized
if not exist "server.properties" (
    echo Server not initialized. Running initialization script...
    call init.bat
    if errorlevel 1 (
        echo Failed to initialize server.
        exit /b 1
    )
)

REM Java version selection
if exist "${java21Path}" (
    set JAVA_CMD="${java21Path}"
) else (
    set JAVA_CMD=java
)

REM Java arguments
set JAVA_OPTS=-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1

REM Start the server
%JAVA_CMD% %JAVA_OPTS% -jar server.jar nogui
`;

    // Create all scripts
    await fs.writeFile(path.join(serverDir, 'init.sh'), unixInitScript);
    await fs.writeFile(path.join(serverDir, 'init.bat'), windowsInitScript);
    await fs.writeFile(path.join(serverDir, 'start.sh'), unixStartScript);
    await fs.writeFile(path.join(serverDir, 'start.bat'), windowsStartScript);
    
    // Make the Unix scripts executable
    await fs.chmod(path.join(serverDir, 'init.sh'), '755');
    await fs.chmod(path.join(serverDir, 'start.sh'), '755');
};

// Helper function to create EULA.txt
const createEULA = async (serverDir) => {
    const eulaContent = `eula=true
# By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).
# This file was generated by Mocha and automatically accepts the EULA.
# Generated at: ${new Date().toISOString()}`;

    await fs.writeFile(path.join(serverDir, 'eula.txt'), eulaContent);
};

// Helper function to generate server.properties
const generateServerProperties = async (config, serverDir) => {
    const properties = [
        `server-name=${config.serverName}`,
        `max-players=${config.maxPlayers}`,
        `difficulty=${config.difficulty}`,
        `gamemode=${config.gameMode}`,
        `view-distance=${config.viewDistance}`,
        `spawn-protection=${config.spawnProtection}`,
        `level-seed=${config.seed}`,
        `level-type=${config.worldType}`,
        `generate-structures=${config.generateStructures}`,
        `online-mode=true`,
        `enable-command-block=true`,
        `motd=Welcome to your Minecraft server!`,
        `pvp=true`,
        `allow-nether=true`,
        `enable-query=true`,
        `query.port=${config.port || 25565}`,
        `server-port=${config.port || 25565}`
    ].join('\n');

    await fs.writeFile(path.join(serverDir, 'server.properties'), properties);
};

module.exports = {
    createStartScript,
    createEULA,
    generateServerProperties
}; 