const fs = require('fs').promises;
const path = require('path');

async function updateStartupScripts(serverDir, config) {
    try {
        const memoryMB = config.memory || 2;
        const maxMemoryMB = memoryMB * 1024; // Convert to MB for Java
        const minMemoryMB = Math.floor(maxMemoryMB * 0.5); // Use 50% of max memory as min

        // Create bash script for Unix-like systems
        const bashScript = `#!/bin/bash

# Minecraft server start script
# Generated by Mocha
# Last updated: ${new Date().toISOString()}

# Java arguments
JAVA_OPTS="-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1"

# Start the server
java $JAVA_OPTS -jar server.jar nogui
`;

        // Create batch script for Windows
        const batchScript = `@echo off
REM Minecraft server start script
REM Generated by Mocha
REM Last updated: ${new Date().toISOString()}

REM Java arguments
set JAVA_OPTS=-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1

REM Start the server
java %JAVA_OPTS% -jar server.jar nogui

REM Keep the window open if there's an error
if errorlevel 1 pause
`;

        // Update start scripts
        await fs.writeFile(path.join(serverDir, 'start.sh'), bashScript);
        await fs.writeFile(path.join(serverDir, 'start.bat'), batchScript);
        
        // Make the bash script executable
        await fs.chmod(path.join(serverDir, 'start.sh'), '755');

        console.log('Startup scripts updated successfully');
        process.exit(0);
    } catch (error) {
        console.error('Error updating startup scripts:', error);
        process.exit(1);
    }
}

// Handle command line arguments
if (require.main === module) {
    const [serverDir, configJson] = process.argv.slice(2);
    if (!serverDir || !configJson) {
        console.error('Missing required arguments: serverDir and configJson');
        process.exit(1);
    }

    try {
        const config = JSON.parse(configJson);
        updateStartupScripts(serverDir, config);
    } catch (error) {
        console.error('Error parsing config:', error);
        process.exit(1);
    }
}

module.exports = {
    updateStartupScripts
}; 