const fs = require('fs').promises;
const path = require('path');

// Helper function to generate server.properties
async function generateServerProperties(config, serverDir) {
    const properties = [
        `server-name=${config.serverName}`,
        `max-players=${config.maxPlayers}`,
        `difficulty=${config.difficulty}`,
        `gamemode=${config.gameMode}`,
        `view-distance=${config.viewDistance}`,
        `spawn-protection=${config.spawnProtection}`,
        `level-seed=${config.seed}`,
        `level-type=${config.worldType}`,
        `generate-structures=${config.generateStructures}`,
        'online-mode=true',
        'enable-command-block=true',
        'motd=Welcome to your Minecraft server!',
        'pvp=true',
        'allow-nether=true',
        'enable-query=true',
        'query.port=25565',
        'server-port=25565'
    ].join('\n');

    await fs.writeFile(path.join(serverDir, 'server.properties'), properties);
}

// Helper function to create start scripts
async function createStartScript(serverDir, config) {
    const memoryMB = config.memory || 2;
    const maxMemoryMB = memoryMB * 1024; // Convert to MB for Java
    const minMemoryMB = Math.floor(maxMemoryMB * 0.5); // Use 50% of max memory as min

    // Create bash script for Unix-like systems
    const bashScript = `#!/bin/bash

# Minecraft server start script
# Generated by Mocha

# Java arguments
JAVA_OPTS="-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1"

# Start the server
java $JAVA_OPTS -jar server.jar nogui
`;

    // Create batch script for Windows
    const batchScript = `@echo off
REM Minecraft server start script
REM Generated by Mocha

REM Java arguments
set JAVA_OPTS=-Xms${minMemoryMB}M -Xmx${maxMemoryMB}M -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableAttachMechanism -XX:+UseG1GC -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=20 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1

REM Start the server
java %JAVA_OPTS% -jar server.jar nogui

REM Keep the window open if there's an error
if errorlevel 1 pause
`;

    // Create start scripts
    await fs.writeFile(path.join(serverDir, 'start.sh'), bashScript);
    await fs.writeFile(path.join(serverDir, 'start.bat'), batchScript);
    
    // Make the bash script executable
    await fs.chmod(path.join(serverDir, 'start.sh'), '755');
}

// Helper function to create EULA.txt
async function createEULA(serverDir) {
    const eulaContent = `eula=true
# By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).
# This file was generated by Mocha and automatically accepts the EULA.
# Generated at: ${new Date().toISOString()}`;

    await fs.writeFile(path.join(serverDir, 'eula.txt'), eulaContent);
}

// Main function to handle the setup process
async function setupServer(serverDir, config) {
    try {
        // Generate server.properties
        await generateServerProperties(config, serverDir);

        // Create start scripts
        await createStartScript(serverDir, config);

        // Create EULA.txt
        await createEULA(serverDir);

        process.exit(0);
    } catch (error) {
        console.error('Error in server setup:', error);
        process.exit(1);
    }
}

// Handle command line arguments
if (require.main === module) {
    const [serverDir, configJson] = process.argv.slice(2);
    if (!serverDir || !configJson) {
        console.error('Missing required arguments: serverDir and configJson');
        process.exit(1);
    }

    try {
        const config = JSON.parse(configJson);
        setupServer(serverDir, config);
    } catch (error) {
        console.error('Error parsing config:', error);
        process.exit(1);
    }
}

module.exports = {
    generateServerProperties,
    createStartScript,
    createEULA,
    setupServer
}; 