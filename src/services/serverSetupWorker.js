const fs = require('fs').promises;
const path = require('path');
const { createStartScript } = require('./grpcServer');

// Helper function to generate server.properties
async function generateServerProperties(config, serverDir) {
    const properties = [
        `server-name=${config.serverName}`,
        `max-players=${config.maxPlayers}`,
        `difficulty=${config.difficulty}`,
        `gamemode=${config.gameMode}`,
        `view-distance=${config.viewDistance}`,
        `spawn-protection=${config.spawnProtection}`,
        `level-seed=${config.seed}`,
        `level-type=${config.worldType}`,
        `generate-structures=${config.generateStructures}`,
        'online-mode=true',
        'enable-command-block=true',
        'motd=Welcome to your Minecraft server!',
        'pvp=true',
        'allow-nether=true',
        'enable-query=true',
        'query.port=25565',
        'server-port=25565'
    ].join('\n');

    await fs.writeFile(path.join(serverDir, 'server.properties'), properties);
}

// Helper function to create EULA.txt
async function createEULA(serverDir) {
    const eulaContent = `eula=true
# By changing the setting below to TRUE you are indicating your agreement to our EULA (https://aka.ms/MinecraftEULA).
# This file was generated by Mocha and automatically accepts the EULA.
# Generated at: ${new Date().toISOString()}`;

    await fs.writeFile(path.join(serverDir, 'eula.txt'), eulaContent);
}

// Main function to handle the setup process
async function setupServer(serverDir, config) {
    try {
        // Generate server.properties
        await generateServerProperties(config, serverDir);

        // Create start scripts using the proper function from grpcServer.js
        await createStartScript(serverDir, config);

        // Create EULA.txt
        await createEULA(serverDir);

        process.exit(0);
    } catch (error) {
        console.error('Error in server setup:', error);
        process.exit(1);
    }
}

// Handle command line arguments
if (require.main === module) {
    const [serverDir, configJson] = process.argv.slice(2);
    if (!serverDir || !configJson) {
        console.error('Missing required arguments: serverDir and configJson');
        process.exit(1);
    }

    try {
        const config = JSON.parse(configJson);
        setupServer(serverDir, config);
    } catch (error) {
        console.error('Error parsing config:', error);
        process.exit(1);
    }
}

module.exports = {
    generateServerProperties,
    createEULA,
    setupServer
}; 