// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerManager_ProvisionServer_FullMethodName = "/server.ServerManager/ProvisionServer"
	ServerManager_StartServer_FullMethodName     = "/server.ServerManager/StartServer"
	ServerManager_StopServer_FullMethodName      = "/server.ServerManager/StopServer"
	ServerManager_DeleteServer_FullMethodName    = "/server.ServerManager/DeleteServer"
	ServerManager_UpdatePlugins_FullMethodName   = "/server.ServerManager/UpdatePlugins"
	ServerManager_GetServerStatus_FullMethodName = "/server.ServerManager/GetServerStatus"
)

// ServerManagerClient is the client API for ServerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerManagerClient interface {
	ProvisionServer(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error)
	StartServer(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error)
	StopServer(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error)
	DeleteServer(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error)
	UpdatePlugins(ctx context.Context, in *UpdatePluginsRequest, opts ...grpc.CallOption) (*UpdatePluginsResponse, error)
	GetServerStatus(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerStatusResponse, error)
}

type serverManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServerManagerClient(cc grpc.ClientConnInterface) ServerManagerClient {
	return &serverManagerClient{cc}
}

func (c *serverManagerClient) ProvisionServer(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerActionResponse)
	err := c.cc.Invoke(ctx, ServerManager_ProvisionServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerClient) StartServer(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerActionResponse)
	err := c.cc.Invoke(ctx, ServerManager_StartServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerClient) StopServer(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerActionResponse)
	err := c.cc.Invoke(ctx, ServerManager_StopServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerClient) DeleteServer(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerActionResponse)
	err := c.cc.Invoke(ctx, ServerManager_DeleteServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerClient) UpdatePlugins(ctx context.Context, in *UpdatePluginsRequest, opts ...grpc.CallOption) (*UpdatePluginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePluginsResponse)
	err := c.cc.Invoke(ctx, ServerManager_UpdatePlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerClient) GetServerStatus(ctx context.Context, in *ServerActionRequest, opts ...grpc.CallOption) (*ServerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStatusResponse)
	err := c.cc.Invoke(ctx, ServerManager_GetServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerManagerServer is the server API for ServerManager service.
// All implementations must embed UnimplementedServerManagerServer
// for forward compatibility.
type ServerManagerServer interface {
	ProvisionServer(context.Context, *ProvisionRequest) (*ServerActionResponse, error)
	StartServer(context.Context, *ServerActionRequest) (*ServerActionResponse, error)
	StopServer(context.Context, *ServerActionRequest) (*ServerActionResponse, error)
	DeleteServer(context.Context, *ServerActionRequest) (*ServerActionResponse, error)
	UpdatePlugins(context.Context, *UpdatePluginsRequest) (*UpdatePluginsResponse, error)
	GetServerStatus(context.Context, *ServerActionRequest) (*ServerStatusResponse, error)
	mustEmbedUnimplementedServerManagerServer()
}

// UnimplementedServerManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerManagerServer struct{}

func (UnimplementedServerManagerServer) ProvisionServer(context.Context, *ProvisionRequest) (*ServerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionServer not implemented")
}
func (UnimplementedServerManagerServer) StartServer(context.Context, *ServerActionRequest) (*ServerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedServerManagerServer) StopServer(context.Context, *ServerActionRequest) (*ServerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedServerManagerServer) DeleteServer(context.Context, *ServerActionRequest) (*ServerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedServerManagerServer) UpdatePlugins(context.Context, *UpdatePluginsRequest) (*UpdatePluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlugins not implemented")
}
func (UnimplementedServerManagerServer) GetServerStatus(context.Context, *ServerActionRequest) (*ServerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStatus not implemented")
}
func (UnimplementedServerManagerServer) mustEmbedUnimplementedServerManagerServer() {}
func (UnimplementedServerManagerServer) testEmbeddedByValue()                       {}

// UnsafeServerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerManagerServer will
// result in compilation errors.
type UnsafeServerManagerServer interface {
	mustEmbedUnimplementedServerManagerServer()
}

func RegisterServerManagerServer(s grpc.ServiceRegistrar, srv ServerManagerServer) {
	// If the following call pancis, it indicates UnimplementedServerManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerManager_ServiceDesc, srv)
}

func _ServerManager_ProvisionServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).ProvisionServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManager_ProvisionServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).ProvisionServer(ctx, req.(*ProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManager_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManager_StartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).StartServer(ctx, req.(*ServerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManager_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManager_StopServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).StopServer(ctx, req.(*ServerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManager_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManager_DeleteServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).DeleteServer(ctx, req.(*ServerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManager_UpdatePlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).UpdatePlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManager_UpdatePlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).UpdatePlugins(ctx, req.(*UpdatePluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManager_GetServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServer).GetServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManager_GetServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServer).GetServerStatus(ctx, req.(*ServerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerManager_ServiceDesc is the grpc.ServiceDesc for ServerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.ServerManager",
	HandlerType: (*ServerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvisionServer",
			Handler:    _ServerManager_ProvisionServer_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _ServerManager_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _ServerManager_StopServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _ServerManager_DeleteServer_Handler,
		},
		{
			MethodName: "UpdatePlugins",
			Handler:    _ServerManager_UpdatePlugins_Handler,
		},
		{
			MethodName: "GetServerStatus",
			Handler:    _ServerManager_GetServerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
