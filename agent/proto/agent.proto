syntax = "proto3";

package agent;

option go_package = "mocha-agent/proto";

// System metrics
message SystemMetrics {
  double cpu_usage = 1;
  int32 cpu_cores = 2;
  int64 memory_used = 3;
  int64 memory_total = 4;
  double disk_usage = 5;
  int64 network_bytes_in = 6;
  int64 network_bytes_out = 7;
}

// Server status
message ServerStatus {
  string server_id = 1;
  string status = 2;
  int32 player_count = 3;
  string message = 4;  // Add message field for status updates
}

// Server status response
message ServerStatusResponse {
  bool success = 1;
  string message = 2;
  string instance_id = 3;
  string status = 4;
}

// Register node request
message RegisterNodeRequest {
  string node_id = 1;
  string api_key = 2;
  string address = 3;
  string hostname = 4;
  string os = 5;
  int64 memory_bytes = 6;
  int32 cpu_cores = 7;
  string ip_address = 8;
}

// Register node response
message RegisterNodeResponse {
  bool success = 1;
  string message = 2;
  string api_key = 3;
}

// Heartbeat request
message HeartbeatRequest {
  string node_id = 1;
  int64 timestamp = 2;
  repeated ServerStatus servers = 3;
  SystemMetrics metrics = 4;
  string api_key = 5;
}

// Heartbeat response
message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}

// Server operation request
message ServerOperationRequest {
  string node_id = 1;
  string server_id = 2;
  string api_key = 3;  // API key for authentication
}

// Server operation response
message ServerOperationResponse {
  bool success = 1;
  string message = 2;
}

// Provision request
message ProvisionRequest {
  string node_id = 1;
  string server_id = 2;
  string version = 3;
  string api_key = 4;
}

// Provision response
message ProvisionResponse {
  bool success = 1;
  string message = 2;
  string instance_id = 3;  // Changed from InstanceId to instance_id
}

// Server action request
message ServerActionRequest {
  string node_id = 1;
  string server_id = 2;
  string action = 3;
  string api_key = 4;
  string instance_id = 5;  // Added instance_id field
}

// Server action response
message ServerActionResponse {
  bool success = 1;
  string message = 2;
}

// Update plugins request
message UpdatePluginsRequest {
  string node_id = 1;
  string server_id = 2;
  repeated string plugins = 3;
  string api_key = 4;
}

// Update plugins response
message UpdatePluginsResponse {
  bool success = 1;
  string message = 2;
}

// The agent service definition
service AgentService {
  // Register a new node
  rpc RegisterNode (RegisterNodeRequest) returns (RegisterNodeResponse) {}

  // Send heartbeat
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse) {}

  // Start a server
  rpc StartServer (ServerOperationRequest) returns (ServerOperationResponse) {}

  // Stop a server
  rpc StopServer (ServerOperationRequest) returns (ServerOperationResponse) {}

  // Delete a server
  rpc DeleteServer (ServerOperationRequest) returns (ServerOperationResponse) {}

  // Provision a server
  rpc ProvisionServer (ProvisionRequest) returns (ProvisionResponse) {}

  // Execute server action
  rpc ExecuteServerAction (ServerActionRequest) returns (ServerActionResponse) {}

  // Update server plugins
  rpc UpdateServerPlugins (UpdatePluginsRequest) returns (UpdatePluginsResponse) {}

  // Get server status
  rpc GetServerStatus (ServerOperationRequest) returns (ServerStatusResponse) {}
}
