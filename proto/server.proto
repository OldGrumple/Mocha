syntax = "proto3";

package server;

service ServerService {
  // Node management
  rpc registerNode(RegisterNodeRequest) returns (RegisterNodeResponse);
  rpc heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc updateMetrics(UpdateMetricsRequest) returns (UpdateMetricsResponse);
  rpc updateCredentials(UpdateCredentialsRequest) returns (UpdateCredentialsResponse);
  rpc installJava(InstallJavaRequest) returns (InstallJavaResponse);

  // Server management
  rpc provisionServer(ProvisionRequest) returns (ProvisionResponse);
  rpc startServer(StartRequest) returns (StartResponse);
  rpc stopServer(StopRequest) returns (StopResponse);
  rpc deleteServer(DeleteRequest) returns (DeleteResponse);
  rpc updatePlugins(UpdatePluginsRequest) returns (UpdatePluginsResponse);
  rpc getServerStatus(StatusRequest) returns (StatusResponse);
}

enum ServerType {
  VANILLA = 0;
  FORGE = 1;
  FABRIC = 2;
  PAPER = 3;
}

message ServerConfig {
  string server_name = 1;
  ServerType server_type = 2;
  int32 max_players = 3;
  string difficulty = 4;
  string game_mode = 5;
  int32 view_distance = 6;
  int32 spawn_protection = 7;
  string seed = 8;
  string world_type = 9;
  bool generate_structures = 10;
  int32 memory = 11;
  int32 port = 12;
}

message Plugin {
  string name = 1;
  string version = 2;
  string url = 3;
}

// Node registration messages
message RegisterNodeRequest {
  string node_id = 1;
  string api_key = 2;
  string address = 3;
  string hostname = 4;
  string os = 5;
  int64 memory_bytes = 6;
  int32 cpu_cores = 7;
  string ip_address = 8;
}

message RegisterNodeResponse {
  bool success = 1;
  string message = 2;
  JavaStatus java_status = 3;
}

message HeartbeatRequest {
  string node_id = 1;
  int64 timestamp = 2;
  repeated ServerStatus servers = 3;
  NodeMetrics metrics = 4;
  string api_key = 5;
}

message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}

message UpdateMetricsRequest {
  string node_id = 1;
  float cpu_usage = 2;
  int32 cpu_cores = 3;
  int64 memory_used = 4;
  int64 memory_total = 5;
  int64 disk_usage = 6;
  int64 network_bytes_in = 7;
  int64 network_bytes_out = 8;
}

message UpdateMetricsResponse {
  bool success = 1;
  string message = 2;
}

message UpdateCredentialsRequest {
  string node_id = 1;
  string api_key = 2;
  CertificatePair certificates = 3;
}

message UpdateCredentialsResponse {
  bool success = 1;
  string message = 2;
}

message InstallJavaRequest {
  string node_id = 1;
}

message InstallJavaResponse {
  bool success = 1;
  string message = 2;
}

message CertificatePair {
  string public_key = 1;
  string private_key = 2;
}

message NodeMetrics {
  float cpu_usage = 1;
  int32 cpu_cores = 2;
  int64 memory_used = 3;
  int64 memory_total = 4;
  int64 disk_usage = 5;
  int64 network_bytes_in = 6;
  int64 network_bytes_out = 7;
}

message JavaStatus {
  bool installed = 1;
  string version = 2;
  bool meets_requirement = 3;
}

message ServerStatus {
  string server_id = 1;
  string status = 2;
  int32 progress = 3;
  string status_message = 4;
  int32 player_count = 5;
}

// Server management messages
message ProvisionRequest {
  string server_id = 1;
  string minecraft_version = 2;
  string server_type = 3;
  ServerConfig config = 4;
  repeated Plugin plugins = 5;
}

message ProvisionResponse {
  bool success = 1;
  string message = 2;
}

message StartRequest {
  string server_id = 1;
}

message StartResponse {
  bool success = 1;
  string message = 2;
}

message StopRequest {
  string server_id = 1;
}

message StopResponse {
  bool success = 1;
  string message = 2;
}

message DeleteRequest {
  string server_id = 1;
}

message DeleteResponse {
  bool success = 1;
  string message = 2;
}

message UpdatePluginsRequest {
  string server_id = 1;
  repeated Plugin plugins = 2;
}

message UpdatePluginsResponse {
  bool success = 1;
  string message = 2;
}

message StatusRequest {
  string server_id = 1;
}

message StatusResponse {
  string server_id = 1;
  string status = 2;
  int32 progress = 3;
  string status_message = 4;
  int32 player_count = 5;
} 